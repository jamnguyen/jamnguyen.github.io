{"version":3,"sources":["components/Box.js","components/SpeedInput.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Box","position","speed","React","useState","angle","setAngle","useEffect","className","style","left","x","top","y","transitionDuration","transform","SpeedInput","value","onChange","onClick","e","stopPropagation","htmlFor","id","target","type","min","Board","setSpeed","boxes","setBoxes","pos","clientX","BOX_SIZE","clientY","map","item","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAyBeA,EAvBH,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAAY,EAEPC,IAAMC,SAAS,GAFR,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAUnC,OANAH,IAAMI,WAAU,WACdD,EAASD,EAAQ,OAGhB,CAACJ,IAGF,qBACEO,UAAU,MACVC,MAAO,CACLC,KAAMT,EAASU,EAAI,KACnBC,IAAKX,EAASY,EAAI,KAClBC,mBAAoBZ,EAAQ,IAC5Ba,UAAU,UAAD,OAAYV,EAAZ,YCIFW,EArBI,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAO3B,OACE,sBAAKV,UAAU,cAAcW,QANf,SAACC,GAEfA,EAAEC,mBAIF,UACE,uBAAOC,QAAQ,cAAf,kCACA,uBACEC,GAAG,cACHN,MAAQA,EACRC,SAAW,SAACE,GAAQF,EAASE,EAAEI,OAAOP,QACtCQ,KAAK,SACLC,IAAM,QCyBCC,EApCD,WAAO,IAAD,EAEUxB,IAAMC,SAAS,IAFzB,mBAEVF,EAFU,KAEH0B,EAFG,OAGUzB,IAAMC,SAAS,CAAC,CAAEO,EAAG,GAAIE,EAAG,MAHtC,mBAGVgB,EAHU,KAGHC,EAHG,KAclB,OACE,sBACEtB,UAAU,QACVW,QAZY,SAACC,GAEf,IAAMW,EAAM,CACVpB,EAAGS,EAAEY,QAAWC,GAChBpB,EAAGO,EAAEc,QAAWD,IAElBH,EAASD,EAAMM,KAAI,kBAAOJ,OAI1B,UAKIF,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACR,cAAC,EAAD,CAEEpC,SAAWmC,EACXlC,MAAQA,GAHV,cACemC,OAMnB,cAAC,EAAD,CACEpB,MAAQf,EACRgB,SAAWU,QCzBJU,MARf,WACE,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f513b2b7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Box = ({ position, speed }) => {\r\n\r\n  const [ angle, setAngle ] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    setAngle(angle + 360);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [position]);\r\n\r\n  return (\r\n    <div\r\n      className=\"box\"\r\n      style={{\r\n        left: position.x + 'px',\r\n        top: position.y + 'px',\r\n        transitionDuration: speed + 's',\r\n        transform: `rotate(${angle}deg)`\r\n      }}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default Box;","import React from 'react';\r\n\r\nconst SpeedInput = ({ value, onChange }) => {\r\n\r\n  const onClick = (e) => {\r\n    // Prevent the box from moving when changing speed \r\n    e.stopPropagation();\r\n  }\r\n\r\n  return (\r\n    <div className=\"speed-input\" onClick={ onClick }>\r\n      <label htmlFor=\"speed-input\">Box Speed (seconds):</label>\r\n      <input\r\n        id=\"speed-input\"\r\n        value={ value }\r\n        onChange={ (e) => { onChange(e.target.value) } }\r\n        type=\"number\"\r\n        min={ 0 }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpeedInput;","import React from 'react';\r\nimport Box from './Box';\r\nimport SpeedInput from './SpeedInput';\r\n\r\nconst BOX_SIZE = 50;\r\n\r\nconst Board = () => {\r\n\r\n  const [ speed, setSpeed ] = React.useState(0.5);\r\n  const [ boxes, setBoxes ] = React.useState([{ x: 50, y: 50 }]);\r\n\r\n  const onClick = (e) => {\r\n    // The position of the event should be the center of the box\r\n    const pos = {\r\n      x: e.clientX - (BOX_SIZE / 2),\r\n      y: e.clientY - (BOX_SIZE / 2)\r\n    }\r\n    setBoxes(boxes.map(() => (pos)));\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"board\"\r\n      onClick={ onClick }\r\n    >\r\n      {\r\n        boxes.map((item, index) => (\r\n          <Box\r\n            key={ `box-${index}` }\r\n            position={ item }\r\n            speed={ speed }\r\n          />\r\n        ))\r\n      }\r\n      <SpeedInput\r\n        value={ speed }\r\n        onChange={ setSpeed }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;","import './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}