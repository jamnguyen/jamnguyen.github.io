{"version":3,"sources":["components/seletor/selector.js","App.js","reportWebVitals.js","index.js"],"names":["Selector","idField","textField","value","onChange","search","React","useState","showOptions","setShowOptions","mapper","ids","data","setData","query","setQuery","isFetching","setIsFetching","throttleId","useRef","useEffect","onSearch","keyword","then","result","reduce","acc","current","map","item","finally","className","onClick","e","clearTimeout","setTimeout","target","type","autoFocus","disabled","id","onSelect","API_SEARCH","App","story","setStory","a","fetch","URLSearchParams","response","json","hits","objectID","text","title","story_text","console","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d881369f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './selector.css';\r\n\r\nconst THROTTLE_TIMEOUT = 1000;\r\n\r\nconst Selector = ({ idField = 'id', textField = 'text', value, onChange, search }) => {\r\n\r\n  const [ showOptions, setShowOptions ] = React.useState(false);\r\n  const [ data, setData ] = React.useState({ mapper: {}, ids: [] });\r\n  const [ query, setQuery ] = React.useState('');\r\n  const [ isFetching, setIsFetching ] = React.useState(false);\r\n  const throttleId = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    onSearch();\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (!showOptions) {\r\n      setQuery('');\r\n    }\r\n  }, [showOptions]);\r\n\r\n  const onSearch = (keyword) => {\r\n    setIsFetching(true);\r\n    search(keyword).then(result => {\r\n      setData({\r\n        mapper: result.reduce((acc, current) => ({ ...acc, [current[idField]]: current }), {}),\r\n        ids: result.map(item => item[idField])\r\n      });\r\n    }).finally(() => {\r\n      setIsFetching(false);\r\n    });\r\n  }\r\n\r\n  const onQueryChange = (e) => {\r\n    // Clear timeout if any\r\n    if (throttleId.current) {\r\n      clearTimeout(throttleId.current);\r\n    }\r\n\r\n    // Setup new timeout\r\n    throttleId.current = setTimeout(() => {\r\n      onSearch(e.target.value);\r\n    }, THROTTLE_TIMEOUT);\r\n\r\n    // Change query\r\n    setQuery(e.target.value);\r\n  }\r\n\r\n  const onSelect = (id) => {\r\n    if (isFetching) return;\r\n    onChange(id);\r\n    setShowOptions(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"selector-container\">\r\n      {\r\n        isFetching &&\r\n          <span className=\"selector-loader\" />\r\n      }\r\n      <div className=\"selector-result\" onClick={ () => setShowOptions(!showOptions) }>\r\n        { value?.[textField] || 'Select an option' }\r\n      </div>\r\n      {\r\n        showOptions &&\r\n        <div className=\"selector-options\">\r\n          <input\r\n            value={ query }\r\n            onChange={ onQueryChange }\r\n            type=\"text\"\r\n            autoFocus\r\n            disabled={ isFetching }\r\n          />\r\n          <ul>\r\n            {\r\n              data.ids.map(id => (\r\n                <li\r\n                  key={ data.mapper[id][idField] }\r\n                  onClick={ () => onSelect(data.mapper[id]) }\r\n                  className={ id === value?.[idField] ? \"highlighted\" : \"\" }\r\n                >\r\n                  { data.mapper[id][textField] }\r\n                </li>\r\n              ))\r\n            }\r\n          </ul>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Selector;","import React from 'react';\nimport { Selector } from './components/seletor';\n\nconst API_SEARCH = 'https://hn.algolia.com/api/v1/search';\n\nfunction App() {\n\n  const [ story, setStory ] = React.useState();\n\n  const search = async (keyword = '') => {\n    try {\n      const response = await fetch(API_SEARCH + '?' + new URLSearchParams({ query: keyword }));\n      const result = await response.json();\n      return result.hits.map(item => ({\n        ...item,\n        id: item.objectID,\n        text: item.title || item.story_text\n      }));\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  return (\n    <div>\n      <Selector\n        value={ story }\n        onChange={ setStory }\n        search={ search }\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}