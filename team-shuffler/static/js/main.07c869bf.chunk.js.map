{"version":3,"sources":["components/Group.js","components/GroupInput.js","components/Result.js","App.js","reportWebVitals.js","index.js"],"names":["Group","groupIndex","players","className","map","player","index","GroupInput","onAddPlayers","React","useState","value","setValue","onChange","e","target","type","onClick","values","replace","split","filter","console","log","Result","teams","onClose","team","playerIndex","randomInt","min","max","rand","Math","random","floor","App","groups","setGroups","setGroupIndex","setTeams","useEffect","group","length","team1","team2","item","push","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07c869bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Group = ({ groupIndex, players = [] }) => {\r\n  return (\r\n    <div className=\"group\">\r\n      <h2>Group { groupIndex }</h2>\r\n      {\r\n        players.map((player, index) => (\r\n          <span key={`${player}-${index}-${groupIndex}`}>{ player }</span>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Group;","import React from 'react';\r\n\r\nconst GroupInput = ({\r\n  groupIndex,\r\n  onAddPlayers\r\n}) => {\r\n\r\n  const [ value, setValue ] = React.useState('');\r\n\r\n  const onInputChange = (e) => {\r\n    setValue(e.target.value);\r\n  }\r\n\r\n  const onAdd = () => {\r\n    const values = value.replace(/(\\r\\n|\\r|\\n)/g, ',').split(',').filter(player => player);\r\n    console.log(values);\r\n    onAddPlayers(values);\r\n    setValue('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"group-input\">\r\n      <p>\r\n        Add players into groups, separate players by new lines.\r\n      </p>\r\n      <textarea\r\n        value={ value }\r\n        onChange={ onInputChange }\r\n      />\r\n      <button type=\"button\" onClick={ onAdd }>\r\n        Add players into group { groupIndex }\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GroupInput;","import React from 'react';\r\n\r\nconst Result = ({ teams = [], onClose }) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <button type=\"button\" onClick={ onClose }>Close [x]</button>\r\n      <div className=\"result\">\r\n        {\r\n          teams.map((team, index) => (\r\n            <div key={`result-team-${index}`} className=\"team\">\r\n              <h2>Team { index + 1 }</h2>\r\n              <p>\r\n              {\r\n                team.map((player, playerIndex) => (\r\n                  <span key={`team-${index}-player-${playerIndex}`}>\r\n                    { player }\r\n                  </span>\r\n                ))\r\n              }\r\n              </p>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;","import React from 'react';\nimport Group from './components/Group';\nimport GroupInput from './components/GroupInput';\nimport Result from './components/Result';\n\nconst randomInt = (min, max) => {\n  let rand = min + Math.random() * (max + 1 - min);\n  return Math.floor(rand);\n}\n\nconst App = () => {\n\n  // 2-dimensions array\n  const [ groups, setGroups ] = React.useState([]);\n  const [ groupIndex, setGroupIndex ] = React.useState(1);\n  const [ teams, setTeams ] = React.useState([]);\n\n  React.useEffect(() => {\n    console.log(teams);\n  }, [teams]);\n\n  const addPlayers = (players) => {\n    setGroups([...groups, players]);\n    setGroupIndex(groupIndex + 1);\n  }\n\n  const shuffle = () => {\n    let team1 = [];\n    let team2 = [];\n\n    for (let item of groups) {\n      const group = [...item];\n      while (group.length > 0) {\n        let index = group.length === 1 ? 0 : randomInt(0, group.length - 1);\n        let team = team1.length < team2.length ? team1 : team2;\n        team.push(group[index]);\n        group.splice(index, 1);\n      }\n    }\n\n    setTeams([team1, team2]);\n  }\n\n  const reset = () => {\n    setGroups([]);\n    setGroupIndex(1);\n    setTeams([]);\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <header>\n          <h1>Team Shuffler</h1>\n        </header>\n        <GroupInput groupIndex={ groupIndex } onAddPlayers={ addPlayers } />\n        <div className=\"groups\">\n          {\n            groups.map((group, index) => (\n              <Group key={`group-${index}`} groupIndex={ index + 1 } players={ group } />\n            ))\n          }\n        </div>\n        {\n          groups.length > 0 ?\n            <div className=\"actions\">\n              <button type=\"button\" onClick={ shuffle }>Shuffle</button>\n              <button type=\"button\" onClick={ reset }>Reset</button>\n            </div> :\n            null\n        }\n      </div>\n      {\n        teams.length > 0 ? \n          <Result teams={ teams } onClose={ () => setTeams([]) } /> :\n          null\n      }\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}